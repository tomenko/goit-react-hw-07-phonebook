{"version":3,"sources":["redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/ContactItem/ContactItem.jsx","components/Filter/Filter.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","value","ContactForm","state","loginInputNameId","loginInputNamberId","hendleInputChange","event","currentTarget","setState","handleSubmit","preventDefault","props","items","some","contact","alert","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","Component","connect","contacts","dispatch","actions","ContactList","children","getCurrentContacts","allContacts","filter","regExp","RegExp","test","contactsItems","onDeleteContact","map","onClick","target","length","createReducer","item","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","className","css","document","getElementById"],"mappings":"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","file":"static/js/main.acd24245.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport { nanoid } from 'nanoid';\r\n\r\n//согласно требованиям - Шаг 2\r\nexport const addContact = createAction(\r\n  'contacts/addContact',\r\n  ({ name, number }) => ({\r\n    payload: {\r\n      id: nanoid(),\r\n      name,\r\n      number,\r\n    },\r\n  }),\r\n);\r\n    \r\nexport const deleteContact = createAction(\r\n    'contacts/deleteContact',\r\n    id => ({\r\n        payload: id,\r\n    })\r\n);\r\n        \r\nexport const changeFilter = createAction(\r\n    'contacts/changeFilter',\r\n    value => ({\r\n        payload: value,\r\n    })\r\n);\r\n\r\n//согласно требованиям - Шаг 1\r\n/* import { createAction } from '@reduxjs/toolkit';\r\nimport { nanoid } from 'nanoid';\r\nimport types from './contacts-types'; */\r\n\r\n/* export const addContact = ({name, namber}) => ({\r\n    type: types.ADD,\r\n    payload: {\r\n        id: nanoid(),\r\n        name,\r\n        namber,\r\n    },\r\n});\r\n    \r\nexport const deleteContact = id => ({\r\n    type: types.DELETE,\r\n    payload: id,\r\n});\r\n            \r\n            \r\nexport const changeFilter = value => ({\r\n    type: types.CHANGE_FILTER,\r\n    payload: value,\r\n}); */\r\n            \r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid'\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n    \r\n  loginInputNameId = nanoid(); \r\n  loginInputNamberId = nanoid(); \r\n  \r\n  hendleInputChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const addInputValue = contact =>\r\n      contact.name === this.state.name || contact.number === this.state.number;\r\n\r\n    if (this.props.items.some(addInputValue)) {\r\n      alert(`Contact is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    this.props.onSubmit({...this.state})\r\n    this.reset()\r\n  };\r\n    \r\n  reset = () => {\r\n    this.setState({ name: '', number: '' })\r\n  };\r\n  \r\n  render() {\r\n    const { name, number } = this.state;\r\n      \r\n    return (\r\n      <form onSubmit = {this.handleSubmit}>\r\n        <label htmlFor={this.loginInputNameId}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            id = {this.loginInputNameId}\r\n            value={name}\r\n            onChange = {this.hendleInputChange}\r\n                \r\n          />\r\n        </label>\r\n\r\n        <label htmlFor={this.loginInputNamberId}>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            id = {this.loginInputNamberId}\r\n            value={number}\r\n            onChange = {this.hendleInputChange}\r\n          />\r\n        </label>\r\n                  \r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  items: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onSubmit: ({ name, number }) =>\r\n    dispatch(actions.addContact({ name, number })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactForm);","import PropTypes from 'prop-types';\r\n\r\nconst ContactList = ({ children }) => (\r\n  <ul>{children}</ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactList;\r\n\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\n\r\nconst ContactItem = ({ onDeleteContact, contactsItems }) => (\r\n  <>\r\n    {contactsItems.map(({ id, name, number }) => {\r\n      return (\r\n        <li key={id}>\r\n          <p>{`${name}: ${number}`}</p>\r\n          <button type=\"button\" onClick={() => onDeleteContact(id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\n\r\nconst getCurrentContacts = (allContacts, filter) => {\r\n  const regExp = new RegExp(filter, 'gi');\r\n\r\n  if (filter) {\r\n    return allContacts.filter(contact => regExp.test(contact.name));\r\n  }\r\n  return allContacts;\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contactsItems: getCurrentContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactItem);\r\n\r\nContactItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};","import { connect } from 'react-redux';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label>\r\n    Find contacts by name\r\n    <input type=\"text\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onChange: event => dispatch(actions.changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(Filter);\r\n\r\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport ContactForm from './components/ContactForm'\nimport ContactList from './components/ContactList'\nimport ContactItem from './components/ContactItem';\nimport Filter from './components/Filter'\n\nfunction App({ items }) {\n  \n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm/>\n      <h2>Contacts</h2>\n\n      {items.length > 0 ? (\n        <>\n          <Filter />\n          <ContactList>\n            <ContactItem />\n          </ContactList>\n        </>\n      ) : (\n        <span>You have no contacts!</span>\n      )}\n    </>\n  )\n};\n\nconst mapStateToProps = state => ({\n  items: state.contacts.items,\n});\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './contacts-actions';\r\n\r\n//согласно требованиям - Шаг 2\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(item => item.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n//согласно требованиям - Шаг 1\r\n/* import { combineReducers } from 'redux';\r\nimport types from './contacts-types';\r\n\r\nconst items = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case types.ADD:\r\n      return [...state, payload];\r\n\r\n    case types.DELETE:\r\n      return state.filter(({ id }) => id !== payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst filter = (state = '', { type, payload }) => {\r\n  switch (type) {\r\n    case types.CHANGE_FILTER:\r\n      return payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n}); */\r\n","//согласно требованиям - Шаг 1\r\nimport {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n//согласно требованиям - Шаг 1\r\n/* import { createStore, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store; */\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\n\nimport css from './index.module.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App className = {css}/>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);"],"sourceRoot":""}